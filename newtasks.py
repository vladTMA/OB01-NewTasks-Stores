from datetime import date, datetime

class Task:
    def __init__ (self, description: str, deadline: date, status: bool = False):
        self.description = description
        self.deadline = deadline
        self.status = status # False = –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, True = –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

    def is_pending(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        return not self.status

    def mark_done(self) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        self.status = True

    def is_overdue(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞"""
        return not self.status and self.deadline < date.today()

    def show(self) -> None:
        formatted_date = f"{self.deadline.day}.{self.deadline.month}.{self.deadline.year}"
        status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if self.status else (
            "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞" if self.is_overdue() else "üïí –ù–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏"
        )
        print(f"–ó–∞–¥–∞—á–∞: {self.description}\nüìÖ –°—Ä–æ–∫: {formatted_date}\n –°—Ç–∞—Ç—É—Å: {status_text}")

def parse_date(date_str: str) -> date:
    return datetime.strptime(date_str, "%d.%m.%Y").date()

task1 = Task("–°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç", parse_date("16.9.2025"))
task2 = Task("–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", parse_date("17.9.2025"))
task3 = Task("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", parse_date("10.10.2025"), status=True)

task1.show()
task2.show()
task3.show()






